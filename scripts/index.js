import { config } from 'dotenv'
config()

import { CONST, u, sc, wallet } from "@cityofzion/neon-core";
import { checkToken, checkNetworkFee, checkSystemFee,
  checkBalance, createTransaction, performTransaction } from "./utils.mjs"

const fromAccount = new wallet.Account(
  process.env.NEO_WALLET_KEY
)
const toAccount = u.HexString.fromHex(process.env.CARBON_WALLET_ADDRESS)

// const tokenScriptHash = CONST.NATIVE_CONTRACT_HASH.NeoToken
const tokenScriptHash = "285b332bc0323bc334987bd4735fb39cc3269e20" // SWTH
const managerScriptHash = "1ad744e7f33e3063dde6fa502413af25f3ad6726"
const lockProxyScriptHash = "eeebee7ef57cb2106fbad2c51c5b9b4c30f0c0ca"

const initGenesis = async () => {
  await fromAccount.decrypt(process.env.NEO_WALLET_PASSWORD)
  let tx = await createTransaction(
    managerScriptHash,
    "changeBookKeeper",
    [
      sc.ContractParam.byteArray("00000000d018d10c000000000000000000000000000000000000000000000000000000000000000000000000d6bef5e33f235c57152f13c9cb9cce8e81310b0117e6c54314bc022498a8026e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008e305f000000001dac2b7c00000000fdb2037b226c6561646572223a343239343936373239352c227672665f76616c7565223a22484a675171706769355248566745716354626e6443456c384d516837446172364e4e646f6f79553051666f67555634764d50675851524171384d6f38373853426a2b38577262676c2b36714d7258686b667a72375751343d222c227672665f70726f6f66223a22785864422b5451454c4c6a59734965305378596474572f442f39542f746e5854624e436667354e62364650596370382f55706a524c572f536a5558643552576b75646632646f4c5267727052474b76305566385a69413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a343239343936373239352c226e65775f636861696e5f636f6e666967223a7b2276657273696f6e223a312c2276696577223a312c226e223a342c2263223a312c22626c6f636b5f6d73675f64656c6179223a31303030303030303030302c22686173685f6d73675f64656c6179223a31303030303030303030302c22706565725f68616e647368616b655f74696d656f7574223a31303030303030303030302c227065657273223a5b7b22696e646578223a312c226964223a2231323035303338316464316232613434316331303439363032653332656532366639356661363463326663316362636634323130313137616138373535343031643030613861227d2c7b22696e646578223a322c226964223a2231323035303337323737653033393635383766356430396638393833646266643535303766326132653236646235393534376435613534623734623332646665343938373533227d2c7b22696e646578223a332c226964223a2231323035303236386533643664323961346362353634383431636631346465393236303930306466626261623936366234363362616437316462646664663236303062303962227d2c7b22696e646578223a342c226964223a2231323035303365353232623561643536666466393830366333356562633438316134366364656265356237396534653862663965666565313064343234366437613436393633227d5d2c22706f735f7461626c65223a5b332c312c342c332c332c322c342c342c322c322c342c312c312c332c332c322c342c312c312c322c332c332c342c312c332c332c312c342c342c312c322c342c312c342c322c332c332c322c322c342c312c322c322c332c322c342c312c342c312c342c312c322c332c312c342c322c332c322c312c335d2c226d61785f626c6f636b5f6368616e67655f76696577223a36303030307d7d3e7181d477b463ba954ffd8383162e7ccf240f8e0000"),
      sc.ContractParam.byteArray("12050381dd1b2a441c1049602e32ee26f95fa64c2fc1cbcf4210117aa8755401d00a8a1205037277e0396587f5d09f8983dbfd5507f2a2e26db59547d5a54b74b32dfe49875312050268e3d6d29a4cb564841cf14de9260900dfbbab966b463bad71dbdfdf2600b09b120503e522b5ad56fdf9806c35ebc481a46cdebe5b79e4e8bf9efee10d4246d7a46963"),
      sc.ContractParam.byteArray("00"),
    ],
    fromAccount,
  )
  tx = await checkNetworkFee(0, tx)
  tx = await checkSystemFee(0, fromAccount, tx)
  // tx = await checkBalance(fromAccount, tokenScriptHash, 1, tx)
  await performTransaction(fromAccount, tx)
}

const execute = async () => {
  await fromAccount.decrypt(process.env.NEO_WALLET_PASSWORD)
  let tx = await createTransaction(
    lockProxyScriptHash,
    "lock",
    [
      sc.ContractParam.hash160(tokenScriptHash),
      sc.ContractParam.hash160(fromAccount.address),
      sc.ContractParam.byteArray(toAccount),
      sc.ContractParam.integer(88000),
      sc.ContractParam.integer(0),
      sc.ContractParam.byteArray(""),
      sc.ContractParam.integer(123),
    ],
    fromAccount,
  )
  await checkToken(tokenScriptHash)
  tx = await checkNetworkFee(0, tx)
  tx = await checkSystemFee(0, fromAccount, tx)
  // tx = await checkBalance(fromAccount, tokenScriptHash, 1, tx)
  await performTransaction(fromAccount, tx)
}

execute().catch((err) => console.log(err));
